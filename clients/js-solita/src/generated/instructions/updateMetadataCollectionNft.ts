/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { MetadataArgs, metadataArgsBeet } from '../types/MetadataArgs'
import { Creator, creatorBeet } from '../types/Creator'

/**
 * @category Instructions
 * @category UpdateMetadataCollectionNft
 * @category generated
 */
export type UpdateMetadataCollectionNftInstructionArgs = {
  root: number[] /* size: 32 */
  oldMetadata: beet.COption<MetadataArgs>
  newName: beet.COption<string>
  newSymbol: beet.COption<string>
  newUri: beet.COption<string>
  newCreators: beet.COption<Creator[]>
  newSellerFeeBasisPoints: beet.COption<number>
  newPrimarySaleHappened: beet.COption<boolean>
  newIsMutable: beet.COption<boolean>
  nonce: beet.bignum
  index: number
}
/**
 * @category Instructions
 * @category UpdateMetadataCollectionNft
 * @category generated
 */
export const updateMetadataCollectionNftStruct = new beet.FixableBeetArgsStruct<
  UpdateMetadataCollectionNftInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['root', beet.uniformFixedSizeArray(beet.u8, 32)],
    ['oldMetadata', beet.coption(metadataArgsBeet)],
    ['newName', beet.coption(beet.utf8String)],
    ['newSymbol', beet.coption(beet.utf8String)],
    ['newUri', beet.coption(beet.utf8String)],
    ['newCreators', beet.coption(beet.array(creatorBeet))],
    ['newSellerFeeBasisPoints', beet.coption(beet.u16)],
    ['newPrimarySaleHappened', beet.coption(beet.bool)],
    ['newIsMutable', beet.coption(beet.bool)],
    ['nonce', beet.u64],
    ['index', beet.u32],
  ],
  'UpdateMetadataCollectionNftInstructionArgs'
)
/**
 * Accounts required by the _updateMetadataCollectionNft_ instruction
 *
 * @property [] oldMetadataAcct
 * @property [] treeAuthority
 * @property [**signer**] treeDelegate
 * @property [] collectionAuthority
 * @property [] collectionMint
 * @property [] collectionMetadata
 * @property [] collectionAuthorityRecordPda
 * @property [] leafOwner
 * @property [] leafDelegate
 * @property [**signer**] payer
 * @property [_writable_] merkleTree
 * @property [] logWrapper
 * @property [] compressionProgram
 * @property [] tokenMetadataProgram
 * @category Instructions
 * @category UpdateMetadataCollectionNft
 * @category generated
 */
export type UpdateMetadataCollectionNftInstructionAccounts = {
  oldMetadataAcct: web3.PublicKey
  treeAuthority: web3.PublicKey
  treeDelegate: web3.PublicKey
  collectionAuthority: web3.PublicKey
  collectionMint: web3.PublicKey
  collectionMetadata: web3.PublicKey
  collectionAuthorityRecordPda: web3.PublicKey
  leafOwner: web3.PublicKey
  leafDelegate: web3.PublicKey
  payer: web3.PublicKey
  merkleTree: web3.PublicKey
  logWrapper: web3.PublicKey
  compressionProgram: web3.PublicKey
  tokenMetadataProgram: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const updateMetadataCollectionNftInstructionDiscriminator = [
  244, 12, 175, 194, 227, 28, 102, 215,
]

/**
 * Creates a _UpdateMetadataCollectionNft_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateMetadataCollectionNft
 * @category generated
 */
export function createUpdateMetadataCollectionNftInstruction(
  accounts: UpdateMetadataCollectionNftInstructionAccounts,
  args: UpdateMetadataCollectionNftInstructionArgs,
  programId = new web3.PublicKey('BGUMAp9Gq7iTEuizy4pqaxsTyUCBK68MDfK752saRPUY')
) {
  const [data] = updateMetadataCollectionNftStruct.serialize({
    instructionDiscriminator:
      updateMetadataCollectionNftInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.oldMetadataAcct,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treeAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.treeDelegate,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.collectionAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionMetadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collectionAuthorityRecordPda,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.leafOwner,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.leafDelegate,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.payer,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.merkleTree,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.logWrapper,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.compressionProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenMetadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
